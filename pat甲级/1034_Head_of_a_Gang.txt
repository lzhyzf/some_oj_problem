#include <iostream>
#include <map>
#include <string>
#include <vector>
#include <set>
#include <algorithm>

using namespace std;

map<string, int> m;
string name[2003];
struct Gang
{
	string Name;
	int num;
}G[2003];
int g[2003][2003] = {}, visited[2003] = {}, sumw, sump, identifier = 1 ,maxw, maxnum;
//sumw记录连通分量图权重和的2倍，sump记录连通分量人数， maxw记录连通分量最大权重，maxnum记录连通分量最大权重的那个人的编号

int cmp(Gang a, Gang b)
{
	return a.Name < b.Name;
}

void dfs(int x)
{//深度遍历图
	int nodew = 0;//记录某个结点的权重和
	visited[x] = 1;
	sump++;
	for(int i = 1; i < identifier; i++){
		if(g[i][x] != 0){
			sumw += g[i][x];
			nodew += g[i][x];
			if(!visited[i])
				dfs(i);
		}
	}
	if(nodew > maxw){//每次遍历完某个结点的所有相邻结点并判断它是否为当前图内权重最大的结点
		maxw = nodew;
		maxnum = x;
	}
}

int main()
{
	int n, k, gnum = 0;
	scanf("%d %d", &n, &k);
	for(int i = 0; i < n; i++){//将人名都映射为数字,并且保存为矩阵图
		string a, b;
		cin >> a >> b;
		if(!m[a]){
			m[a] = identifier;
			name[identifier++] = a;
		}
		if(!m[b]){
			m[b] = identifier;
			name[identifier++] = b;
		}
		int weight;
		scanf("%d", &weight);
		g[m[a]][m[b]] = g[m[b]][m[a]] += weight;
	}
	for(int i = 1; i < identifier; i++){
		sumw = sump = maxw = maxnum = 0;
		if(!visited[i])
			dfs(i);
		if(sump > 2 && sumw > 2 * k){
			G[gnum].Name = name[maxnum];
			G[gnum].num = sump;
			gnum++;
		}
	}
	if(gnum == 0)
		printf("0");
	else{
		sort(G, G + gnum, cmp);
		printf("%d\n", gnum);
		for(int i = 0; i < gnum; i++)
			cout << G[i].Name << ' ' << G[i].num << endl;
	}
	cin >> n;
	return 0;
}