#include <iostream>
#include <string>
#include <vector>
#include <queue>
#include <map>
#include <set>

using namespace std;

vector<vector<int> > v(10000);//矩阵图，用来存站点间关系
map<int, int> line;
vector<int>path, temppath;
int start, endd, mincnt, mintranser, visited[10000];

int gettranser(vector<int> a)
{
	int preline = 0, cnt = 0;
	for(int i = 1; i < a.size(); i++){
		if(line[a[i - 1] * 10000 + a[i]] != preline) cnt++;
		preline = line[a[i - 1] * 10000 + a[i]];
	}
	return cnt;
}

void dfs(int site, int cnt)
{
	if(site == endd && (cnt < mincnt || (cnt == mincnt && gettranser(temppath) < mintranser))){
		mincnt = cnt;
		mintranser = gettranser(temppath);
		path = temppath;
	}
	if(site == endd) return;
	for(int i = 0; i < v[site].size(); i++){
		if(visited[v[site][i]] == 0){
			visited[v[site][i]] = 1;
			temppath.push_back(v[site][i]);
			dfs(v[site][i], cnt + 1);
			visited[v[site][i]] = 0;
			temppath.pop_back();
		}
	}
}

int main() {
	int n, k;
	scanf("%d", &n);
	for(int i = 0; i < n; i++){
		int m, pre, temp;
		scanf("%d %d", &m, &pre);
		for(int j = 1; j < m; j++){
			scanf("%d", &temp);
			v[pre].push_back(temp);
			v[temp].push_back(pre);
			line[pre*10000 + temp] = line[temp*10000 + pre] = i + 1;
			pre = temp;
		}
	}
	scanf("%d", &k);
	for(int i = 0; i < k; i++){
		mincnt = 99999;
		mintranser = 99999;
		temppath.clear();
		for(int j = 0; j < 10000; j++)
			visited[j] = 0;
		scanf("%d %d", &start, &endd);
		temppath.push_back(start);
		visited[start] = 1;
		dfs(start, 0);
		printf("%d\n", mincnt);
		int preline = 0, pretranser = start;
		for(int j = 1; j < path.size(); j++){
			if(line[path[j - 1] * 10000 + path[j]] != preline){
				if(preline != 0) printf("Take Line#%d from %04d to %04d.\n", preline, pretranser, path[j - 1]);
				preline = line[path[j - 1] * 10000 + path[j]];
				pretranser = path[j - 1];
			}
		}
		printf("Take Line#%d from %04d to %04d.\n", preline, pretranser, endd);
	}
	cin >> n;
	return 0;
}