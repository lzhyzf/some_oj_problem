#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <cmath>
#include <map>

using namespace std;

bool dp[1001][1001];//dp[i][j]要来表示i到j的序列是否是回文，是的话就是true

int main()
{
	string s;
	getline(cin, s);
	int len = s.length(), ans = 1;
	for(int i = 0; i < len; i++)//所有长度为1的子列dp初始化
		dp[i][i] = true;
	for(int i = 0; i < len - 1; i++){//所有长度为2的子列dp初始化
		if(s[i] == s[i+1]){
			dp[i][i+1] = true;
			ans = 2;
		}
	}
	for(int l = 3; l <= len; l++){
		for(int i = 0; i < len - l + 1; i++){
			if(s[i] == s[i+l-1] && dp[i+1][i+l-2]){
				dp[i][i+l-1] = true;
				ans = l;
			}
		}
	}
	printf("%d", ans);
	scanf("%d", &dp);
	return 0;
}


/*
int main()
{//更快捷的算法有Manacher算法，O（n）的时间复杂度！
	int n, maxlen = 1;
	string s = "#";
	char c;
	while((c = getchar()) != '\n'){
		s += c;
		s += "#";
	}
	int len = s.length();
	for(int i = 0; i < s.length(); i++){
		int j = 0;
		for(; i + j <= len - 1 && i - j >= 0 && s[i+j] == s[i-j]; j++);
		if(j - 1 > maxlen)	maxlen = j - 1;
	}
	cout << maxlen;
	cin >> n;
	return 0;
}
*/