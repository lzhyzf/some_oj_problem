#include <iostream>
#include <string>
#include <vector>
#include <queue>
#include <map>
#include <set>

using namespace std;

int n, levelnum[35], maxlevel = 0;
vector<int> in, post, level;

struct node
{
	node *left, *right;
	int data, level;
};

void BuildT(node *&tree, int inl, int inr, int postl, int postr)
{
	if(postl > postr) return;
	tree = (node*)malloc(sizeof(struct node));
	tree->left = tree->right = NULL;
	tree->data = post[postr];
	int i = inl;
	while(in[i] != post[postr] && i < inr) i++;
	BuildT(tree->left, inl, i - 1, postl, postl + i - inl - 1);
	BuildT(tree->right, i + 1, inr, postl + i - inl, postr - 1);
}

void bfs(node *tree)
{
	queue<node *> q;
	tree->level = 1;
	q.push(tree);
	while(q.empty() != 1){
		node *temp = q.front();
		q.pop();
		levelnum[temp->level]++;
		if(temp->level > maxlevel) maxlevel = temp->level;
		level.push_back(temp->data);
		if(temp->left){
			temp->left->level = temp->level + 1;
			q.push(temp->left);
		}
		if(temp->right){
			temp->right->level = temp->level + 1;
			q.push(temp->right);
		}
	}
}

int main() {
	scanf("%d", &n);
	in.resize(n);
	post.resize(n);
	for(int i = 0; i < n; i++)
		scanf("%d", &in[i]);
	for(int i = 0; i < n; i++)
		scanf("%d", &post[i]);
	node *T = NULL;
	BuildT(T, 0, n - 1, 0, n - 1);
	bfs(T);
	int totalf = 0, j, cnt = 0;
	for(j = 1; j <= maxlevel; j++){
		int leftindex = totalf, rightindex = totalf + levelnum[j] - 1;
		if(j % 2 == 1){
			//奇数层从又往左打印
			for(int k = rightindex; k >= leftindex; k--){
				printf("%d", level[k]);
				cnt++;
				if(cnt != n) printf(" ");
			}
		}
		else{
			for(int k = leftindex; k <= rightindex; k++){
				printf("%d", level[k]);
				cnt++;
				if(cnt != n) printf(" ");
			}
		}
		totalf += levelnum[j];
	}
	cin >> n;
	return 0;
}