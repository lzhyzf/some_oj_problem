#include <iostream>
#include <stdlib.h>
#include <string.h>
#include <vector>
#include <map>
#include <set>
#include <stack>
#include <string>
#include <string.h>
#include <algorithm>
#include <queue>
#include <cmath>

using namespace std;

long long Convert(string n, long long radix)
{
	long long temp, index = 0;
	long long sum = 0;
	for(auto it = n.rbegin(); it != n.rend(); it++){
		temp = isdigit(*it) ? (*it) - '0' : (*it) - 'a' + 10;
		sum += temp * pow(radix, index++);
	}
	return sum;
}

int Find_radix(string n, long long sum)
{
	char a = *max_element(n.begin(), n.end());
	long long low = isdigit(a) ? a - '0' + 1 : a - 'a' + 11;
	long long high = max(low, sum);
	while(low <= high){
		long long middle = (low + high) / 2;
		long long temp = Convert(n, middle);
		if(temp > sum || temp < 0) high = middle - 1;
		else if(temp == sum) return middle;
		else low = middle + 1;
	}
	return -1;
}

int main()
{
	string n1, n2;
	int tag;
	long long radix;
	cin >> n1 >> n2 >> tag >> radix;
	int radixresult = tag == 1 ? Find_radix(n2, Convert(n1, radix)) : Find_radix(n1, Convert(n2, radix));
	if(radixresult != -1) printf("%d", radixresult);
	else printf("Impossible");
	cin >> n1;
	return 0;
}