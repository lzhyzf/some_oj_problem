#include <iostream>
#include <map>
#include <queue>
#include <string>
#include <vector>
#include <set>
#include <algorithm>

using namespace std;

struct node
{
	int left, right;
}tree[11];

int n, visited[11], cnt = 0;

void leveltraversal(int root)
{
	queue<int> q;
	q.push(root);
	while(!q.empty()){
		int tmp = q.front();
		cnt++;
		printf("%d", tmp);
		if(cnt != n) printf(" ");
		else printf("\n");
		q.pop();
		if(tree[tmp].right != -1) q.push(tree[tmp].right);
		if(tree[tmp].left != -1) q.push(tree[tmp].left);
	}
}

void inordertravesal(int root)
{
	if(tree[root].right != -1)
		inordertravesal(tree[root].right);
	cnt++;
	printf("%d", root);
	if(cnt != n) printf(" ");
	if(tree[root].left != -1)
		inordertravesal(tree[root].left);
}

int main()
{
	int root;
	char a, b;
	scanf("%d", &n);
	for(int i = 0; i < n; i++){
		scanf(" %c %c", &a, &b);
		if(a == '-') tree[i].left = -1;
		else{
			tree[i].left = a - '0';
			visited[a - '0'] = 1;
		}
		if(b == '-') tree[i].right = -1;
		else{
			tree[i].right = b - '0';
			visited[b - '0'] = 1;
		}
	}
	for(int i = 0; i < n; i++)
		if(visited[i] == 0){
		root = i;
		break;
		}
	leveltraversal(root);
	cnt = 0;
	inordertravesal(root);
	cin >> n;
	return 0;
}