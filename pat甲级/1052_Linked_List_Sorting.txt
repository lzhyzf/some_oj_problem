/*#include <iostream>
#include <string>
#include <map>
#include <stack>
#include <queue>
#include <algorithm>

using namespace std;

struct Node
{
	int next, data, address;
	bool flag;
}list[100005];

int cmp(Node a, Node b)
{
	if(a.flag == false || b.flag == false)
		return a.flag > b.flag;
	else return a.data < b.data;
}

int main()
{
	int head, n, temp, cnt = 0, p;

	for(int i = 0; i < 100005; i++)
		list[i].flag = false;
	scanf("%d %d", &n, &head);
	for(int i = 0; i < n; i++){//输入n个结点
		scanf("%d", &temp);
		list[temp].address = temp;
		scanf("%d %d", &list[temp].data, &list[temp].next);
	}
	for(p = head; p != -1; p = list[p].next){
		list[p].flag = true;
		cnt++;
	}
	sort(list, list + 100005, cmp);
	if(cnt){
		printf("%d %05d\n", cnt, list[0].address);
		for(int i = 0; i < cnt - 1; i++)
			printf("%05d %d %05d\n", list[i].address, list[i].data, list[i+1].address);
		printf("%05d %d -1", list[cnt - 1].address, list[cnt - 1].data);
	}
	else
		printf("0 -1");
	scanf("%d", &n);
	return 0;	
}
*/

#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <stack>
#include <cmath>
#include <algorithm>

using namespace std;

struct node
{
	int address, data;
}list[100005];

int cmp(node a, node b)
{
	return a.data < b.data;
}

int main()
{
	int n, head, y;
	scanf("%d %d", &n, &head);
	for(int i = 0; i < n; i++)
		scanf("%d %d %d", &list[i].address, &list[i].data, &y);
	sort(list, list + n, cmp);
	printf("%d %05d\n", n, list[0].address);
	for(int i = 0; i < n; i++){
		if(i != n - 1) printf("%05d %d %05d\n", list[i].address, list[i].data, list[i+1].address);
		else printf("%05d %d -1\n", list[i].address, list[i].data);
	}
	scanf("%d", &n);
	return 0;
}